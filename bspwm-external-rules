#!/usr/bin/env bash
# Modular bspwm external rules script
# - emit() prints to stdout *and* appends to LOG_FILE
# - each matcher returns 0 if it produced a rule, 1 otherwise

LOG_FILE="${HOME}/bin/logs/bspwm-external_rules.log"
DEBUG_LOG="${HOME}/bin/logs/bspwm-external_rules-debug.log"

mkdir -p "$(dirname "$LOG_FILE")" "$(dirname "$DEBUG_LOG")"

# Optional: send xtrace to a separate debug file (keeps rule output clean)
exec 3>>"$DEBUG_LOG" || true
BASH_XTRACEFD=3
# Uncomment the next line to enable xtrace debugging
# set -x

wid="${1:-}"
class="${2:-}"
instance="${3:-}"

# --- logging / output helpers -------------------------------------------------
emit() {
    # print to stdout (for bspwm) and append to logfile
    # preserve exact single-line output
    printf '%s\n' "$*" | tee -a "$LOG_FILE"
}

debug() {
    # timestamped debug-only messages
    printf '%s %s\n' "$(date '+%F %T')" "$*" >> "$DEBUG_LOG"
}

# --- utility functions ------------------------------------------------------

normalize_names() {
    class="${class,,}"
    instance="${instance,,}"
}

get_window_role() {
    # safe extraction of WM_WINDOW_ROLE (empty if not present)
    window_role="$(xprop -id "$wid" WM_WINDOW_ROLE 2>/dev/null \
        | sed -nE 's/^WM_WINDOW_ROLE\(STRING\) = "(.*)"/\1/p' || true)"
}

get_window_title() {
    window_title="$(xprop -id "$wid" WM_NAME 2>/dev/null \
        | sed -nE 's/^WM_NAME\(UTF8_STRING\) = "(.*)"/\1/p' || true)"
    window_title="${window_title,,}"
}

get_window_type() {
    window_types="$(xprop -id "$wid" _NET_WM_WINDOW_TYPE 2>/dev/null \
        | grep -oE '_NET_WM_WINDOW_TYPE_[^ ,]+' | tr '[:upper:]' '[:lower:]')"
}

is_transient() {
    local parent
    parent=$(xprop -id "$wid" WM_TRANSIENT_FOR 2>/dev/null | awk -F'#' '{gsub(/ /,"",$2); print $2}')
    [[ -n "$parent" && "$parent" != "0x0" ]]
}

# --- rule matchers (return 0 when they emit a rule) -------------------------

# --- floating detection (automatic) ---
match_auto_floating() {
    # float if transient
    if is_transient; then
        debug "Transient window detected: $wid"
        emit "state=floating"
        return 0
    fi

    # float if common floating types
    for t in $window_types; do
        case "$t" in
            *_dialog|*_utility|*_toolbar|*_splash|*_dropdown_menu|*_popup_menu|*_tooltip)
                emit "state=floating"
                return 0
                ;;
        esac
    done

    # float if modal or above
    if xprop -id "$wid" _NET_WM_STATE 2>/dev/null | grep -qE '_NET_WM_STATE_MODAL|_NET_WM_STATE_ABOVE'; then
        emit "state=floating"
        return 0
    fi

    return 1
}

# --- personal floating overrides ---
match_floating() {
    # Role-based floating first (quick exit)
    if [[ "$window_role" = "pop-up" ]]; then
        emit "state=floating"
        return 0
    fi

    if [[ "$window_title" == "picture-in-picture" ]]; then
        emit "state=floating sticky=on rectangle=400x225+1520+815"
        return 0
    fi

    case "$class:$instance" in
        gimp:*) emit "state=floating desktop=^8 follow=on"; return 0 ;;
        mplayer2:*) emit "state=floating"; return 0 ;;
        feh:*) emit "state=floating"; return 0 ;;
        gnome-calculator:*) emit "state=floating"; return 0 ;;
        pavucontrol:*) emit "state=floating"; return 0 ;;
        mpv:*) emit "state=floating"; return 0 ;;
        blueman-manager:*) emit "state=floating"; return 0 ;;
        thunderbird-default:msgcompose) emit "state=floating sticky=on"; return 0 ;;
        atcos:*) emit "state=floating follow=on"; return 0 ;;
    esac
    return 1
}

# --- other rules ---
match_other() {
    case "$class:$instance" in
        kupfer.py:*) emit "focus=on"; return 0 ;;
        screenkey:*) emit "manage=off"; return 0 ;;
    esac
    return 1
}

match_desktop() {
    case "$class" in
        alacritty|xterm) emit "desktop=^1 state=tiled follow=on"; return 0 ;;
        chromium) emit "desktop=^2"; return 0 ;;
        firefox-esr|firefox) emit "desktop=^2 follow=off"; return 0 ;;
        google-chrome) emit "desktop=^2 follow=off"; return 0 ;;
        code) emit "desktop=^3"; return 0 ;;
    esac
    return 1
}

# --- main -------------------------------------------------------------------
get_window_role
get_window_title
get_window_type
normalize_names
debug "wid=$wid class=$class instance=$instance role=$window_role title=$window_title types=$window_types"

if match_auto_floating; then set +x; exit 0; fi
if match_floating; then set +x; exit 0; fi
if match_other; then set +x; exit 0; fi
if match_desktop; then set +x; exit 0; fi

# no explicit rule: let bspwm decide
set +x
exit 0
